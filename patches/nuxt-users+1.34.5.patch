diff --git a/node_modules/nuxt-users/dist/runtime/server/services/password.js b/node_modules/nuxt-users/dist/runtime/server/services/password.js
index d169a3b..73a9b5a 100644
--- a/node_modules/nuxt-users/dist/runtime/server/services/password.js
+++ b/node_modules/nuxt-users/dist/runtime/server/services/password.js
@@ -1,7 +1,10 @@
-import { createTransport } from "nodemailer";
+// import { createTransport } from "nodemailer";
 import crypto from "node:crypto";
 import bcrypt from "bcrypt";
 import { findUserByEmail, updateUserPassword, useDb } from "../utils/index.js";
+import { Resend } from 'resend';
+const resend = new Resend(process.env.RESEND_API_KEY);
+
 const TOKEN_EXPIRATION_HOURS = 1;
 export const sendPasswordResetLink = async (email, options, baseUrl) => {
   const user = await findUserByEmail(email, options);
@@ -21,30 +24,66 @@ export const sendPasswordResetLink = async (email, options, baseUrl) => {
     console.error("[Nuxt Users] Mailer configuration is missing. Cannot send password reset email.");
     return;
   }
-  const transporter = createTransport({
-    host: options.mailer.host,
-    port: options.mailer.port,
-    secure: options.mailer.secure,
-    auth: {
-      user: options.mailer.auth.user,
-      pass: options.mailer.auth.pass
-    }
-  });
+  // const transporter = createTransport({
+  //   host: options.mailer.host,
+  //   port: options.mailer.port,
+  //   secure: options.mailer.secure,
+  //   auth: {
+  //     user: options.mailer.auth.user,
+  //     pass: options.mailer.auth.pass
+  //   }
+  // });
   const appBaseUrl = baseUrl || "http://localhost:3000";
   const resetUrl = new URL(options.passwordResetUrl, appBaseUrl);
   resetUrl.searchParams.set("token", token);
   resetUrl.searchParams.set("email", email);
   const resetLink = resetUrl.toString();
   try {
-    await transporter.sendMail({
-      from: options.mailer.defaults?.from || '"Nuxt Users" <noreply@example.com>',
+//     await transporter.sendMail({
+//       from: options.mailer.defaults?.from || '"Nuxt Users" <noreply@example.com>',
+//       to: email,
+//       subject: "Password Reset Request",
+//       text: `Please click the following link to reset your password: ${resetLink}
+
+// This link will expire in ${TOKEN_EXPIRATION_HOURS} hour(s).
+
+// If you did not request this password reset, please ignore this email.`,
+//       html: `
+//         <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
+//           <h2>Password Reset Request</h2>
+//           <p>You have requested to reset your password. Please click the button below to set a new password:</p>
+          
+//           <div style="text-align: center; margin: 30px 0;">
+//             <a href="${resetLink}" 
+//                style="background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
+//               Reset Password
+//             </a>
+//           </div>
+          
+//           <p>Or copy and paste the following link into your browser:</p>
+//           <p style="word-break: break-all; background-color: #f8f9fa; padding: 10px; border-radius: 3px;">
+//             <a href="${resetLink}">${resetLink}</a>
+//           </p>
+          
+//           <p style="color: #6c757d; font-size: 14px;">
+//             This link will expire in ${TOKEN_EXPIRATION_HOURS} hour(s).
+//           </p>
+          
+//           <p style="color: #6c757d; font-size: 14px;">
+//             If you did not request this password reset, please ignore this email. Your password will remain unchanged.
+//           </p>
+//         </div>
+//       `
+//     });
+    await resend.emails.send({
+      from: 'Prenzlbogen Parcel Exchange <pakete@prenzlbogies.de>',
       to: email,
       subject: "Password Reset Request",
-      text: `Please click the following link to reset your password: ${resetLink}
+//       text: `Please click the following link to reset your password: ${resetLink}
 
-This link will expire in ${TOKEN_EXPIRATION_HOURS} hour(s).
+// This link will expire in ${TOKEN_EXPIRATION_HOURS} hour(s).
 
-If you did not request this password reset, please ignore this email.`,
+// If you did not request this password reset, please ignore this email.`,
       html: `
         <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
           <h2>Password Reset Request</h2>
diff --git a/node_modules/nuxt-users/dist/runtime/server/services/registration.js b/node_modules/nuxt-users/dist/runtime/server/services/registration.js
index e9cf3c9..baf5ac8 100644
--- a/node_modules/nuxt-users/dist/runtime/server/services/registration.js
+++ b/node_modules/nuxt-users/dist/runtime/server/services/registration.js
@@ -1,8 +1,10 @@
-import { createTransport } from "nodemailer";
+// import { createTransport } from "nodemailer";
 import crypto from "node:crypto";
 import bcrypt from "bcrypt";
 import { findUserByEmail, useDb } from "../utils/index.js";
 import { validatePassword, getPasswordValidationOptions } from "nuxt-users/utils";
+import { Resend } from 'resend';
+const resend = new Resend(process.env.RESEND_API_KEY);
 const TOKEN_EXPIRATION_HOURS = 24;
 export const registerUser = async (userData, options, baseUrl) => {
   const existingUser = await findUserByEmail(userData.email, options);
@@ -59,23 +61,63 @@ export const sendConfirmationEmail = async (email, name, token, options, baseUrl
     console.error("[Nuxt Users] Mailer configuration is missing. Cannot send confirmation email.");
     return;
   }
-  const transporter = createTransport({
-    host: options.mailer.host,
-    port: options.mailer.port,
-    secure: options.mailer.secure,
-    auth: {
-      user: options.mailer.auth.user,
-      pass: options.mailer.auth.pass
-    }
-  });
+  // const transporter = createTransport({
+  //   host: options.mailer.host,
+  //   port: options.mailer.port,
+  //   secure: options.mailer.secure,
+  //   auth: {
+  //     user: options.mailer.auth.user,
+  //     pass: options.mailer.auth.pass
+  //   }
+  // });
   const appBaseUrl = baseUrl || "http://localhost:3000";
   const confirmationUrl = new URL(`${options.apiBasePath}/confirm-email`, appBaseUrl);
   confirmationUrl.searchParams.set("token", token);
   confirmationUrl.searchParams.set("email", email);
   const confirmationLink = confirmationUrl.toString();
   try {
-    await transporter.sendMail({
-      from: options.mailer.defaults?.from || '"Nuxt Users" <noreply@example.com>',
+//     await transporter.sendMail({
+//       from: options.mailer.defaults?.from || '"Nuxt Users" <noreply@example.com>',
+//       to: email,
+//       subject: "Confirm your email address",
+//       text: `Hi ${name},
+
+// Welcome! Please click the following link to confirm your email address and activate your account:
+
+// ${confirmationLink}
+
+// This link will expire in ${TOKEN_EXPIRATION_HOURS} hours.
+
+// If you did not create an account, please ignore this email.`,
+//       html: `
+//         <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
+//           <h2>Welcome, ${name}!</h2>
+//           <p>Thank you for registering! Please click the button below to confirm your email address and activate your account:</p>
+          
+//           <div style="text-align: center; margin: 30px 0;">
+//             <a href="${confirmationLink}" 
+//                style="background-color: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
+//               Confirm Email Address
+//             </a>
+//           </div>
+          
+//           <p>Or copy and paste the following link into your browser:</p>
+//           <p style="word-break: break-all; background-color: #f8f9fa; padding: 10px; border-radius: 3px;">
+//             <a href="${confirmationLink}">${confirmationLink}</a>
+//           </p>
+          
+//           <p style="color: #6c757d; font-size: 14px;">
+//             This link will expire in ${TOKEN_EXPIRATION_HOURS} hours.
+//           </p>
+          
+//           <p style="color: #6c757d; font-size: 14px;">
+//             If you did not create an account, please ignore this email. Your account will remain inactive.
+//           </p>
+//         </div>
+//       `
+//     });
+    await resend.emails.send({
+      from: 'Prenzlbogen Parcel Exchange <pakete@prenzlbogies.de>',
       to: email,
       subject: "Confirm your email address",
       text: `Hi ${name},
